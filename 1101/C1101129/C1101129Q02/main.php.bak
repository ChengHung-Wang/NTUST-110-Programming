<?php
// BigNumber.php
class BigNumber
{
    //当前数值的字符串类型
    protected $numberValue = '0';
    //数值精度
    protected $numberScale = 0;
    //类名和命名空间
    protected $currentFullClassName = '';

    /**
     * @brief 构造
     *
     * @param $number String/BigNumber 字符串或BigNumber类型的数字
     * @param $scale Int 数字精度
     *
     * @return null
     */
    public function __construct($number = '0', $scale = null)
    {
        $this->valueOf($number, $scale);
    }

    /**
     * @brief 构造一个新的BigNumber实例
     *
     * @param $number String/BigNumber 字符串或BigNumber类型的数字
     * @param $scale Int 数字精度
     *
     * @return null
     */
    public static function build($number, $scale = null)
    {
        return new self($number, $scale);
    }

    /**
     * @brief 检测数据是否BigNumber类型
     *
     * @param $number 要检测的数据
     *
     * @return Bool
     */
    public static function isBigNumber($number)
    {
        $currentFullClassName = get_class();

        if (get_class($number) == $currentFullClassName) {
            return true;
        }

        return false;
    }

    /**
     * @brief 获取当前的数字精度
     *
     * @return Int 数字精度
     */
    public function getScale()
    {
        return $this->numberScale;
    }

    /**
     * @brief 设置一个值到BigNumber实例中
     *
     * @param $number String/BigNumber 字符串或BigNumber类型的数字
     * @param $scale Int 数字精度
     *
     * @return null
     */
    public function valueOf($number = '0', $scale = null)
    {
        $this->numberValue = $this->numberToString($number);
        if ($scale !== null) {
            $this->numberScale = intval($scale);
        }
        //$this->numberValue = bcadd($this->numberValue, '0', $this->numberScale);

        return $this;
    }

    /**
     * @brief 以字符串类型返回数值
     *
     * @return String
     */
    public function toString()
    {
        return strval($this->numberValue);
    }

    /**
     * @brief 返回BigNumber实例中的数值,当前默认为字符串类型
     *
     * @return String
     */
    public function value()
    {
        return $this->toString();
    }

    /**
     * @brief 将传入的number参数转为字符串类型
     *
     * @param $number String/Int/Float/Double/Long/Bool/BigNumber number参数
     *
     * @return String
     */
    public function numberToString($number = '0')
    {
        if (is_object($number) && self::isBigNumber($number)) {
            $this->numberScale = intval($number->getScale());
            $number = $number->toString();
        } else if (is_int($number) || is_float($number) || is_double($number) || is_long($number)) {
            $number = strval($number);
        } else if (is_bool($number)) {
            $number = intval($number);
            $number = strval($number);
        } else if (is_null($number)) {
            $number = '0';
        } else if (is_string($number) && $number === '') {
            $number = '0';
        } else if (is_string($number)) {
            $number = $number;
        } else {
            $number = '0';
        }

        return $number;
    }

    /**
     * @brief 将当前数值加上传入的number值
     *
     * @param $number String/BigNumber 用于相加的数值
     *
     * @return BigNumber BigNumber类型的实例
     */
    public function add($number = '0')
    {
        $number = $this->numberToString($number);
        $number = bcadd($this->numberValue, $number, $this->numberScale);
        $this->numberValue = $this->numberToString($number);
        return $this;
    }

    /**
     * @brief 将当前数值减去传入的number值
     *
     * @param $number String/BigNumber 用于相减的数值
     *
     * @return BigNumber BigNumber类型的实例
     */
    public function sub($number = '0')
    {
        $number = $this->numberToString($number);
        $number = bcsub($this->numberValue, $number, $this->numberScale);
        $this->numberValue = $this->numberToString($number);
        return $this;
    }

    /**
     * @brief 将当前数值乘以传入的number值
     *
     * @param $number String/BigNumber 用于相乘的数值
     *
     * @return BigNumber BigNumber类型的实例
     */
    public function mul($number = '0')
    {
        $number = $this->numberToString($number);
        $number = bcmul($this->numberValue, $number, $this->numberScale);
        $this->numberValue = $this->numberToString($number);
        return $this;
    }

    /**
     * @brief 将当前数值除以传入的number值
     *
     * @param $number String/BigNumber 用于相除的数值
     *
     * @return BigNumber BigNumber类型的实例
     */
    public function div($number = '0')
    {
        $number = $this->numberToString($number);
        $number = bcdiv($this->numberValue, $number, $this->numberScale);
        $this->numberValue = $this->numberToString($number);
        return $this;
    }

    /**
     * @brief 将当前数值用传入的number值取模
     *
     * @param $number String/BigNumber 用于取模的数值
     *
     * @return BigNumber BigNumber类型的实例
     */
    public function mod($number = '0')
    {
        $number = $this->numberToString($number);
        $number = bcmod($this->numberValue, $number);
        $this->numberValue = $this->numberToString($number);
        return $this;
    }

    /**
     * @brief 取当前数值的number次方
     *
     * @param $number String/BigNumber 乘方的数值
     *
     * @return BigNumber BigNumber类型的实例
     */
    public function pow($number = '0')
    {
        $number = $this->numberToString($number);
        $number = bcpow($this->numberValue, $number, $this->numberScale);
        $this->numberValue = $this->numberToString($number);
        return $this;
    }

    /**
     * @brief 取当前数值的平方根
     *
     * @return BigNumber BigNumber类型的实例
     */
    public function sqrt()
    {
        $number = bcsqrt($this->numberValue, $this->numberScale);
        $this->numberValue = $this->numberToString($number);
        return $this;
    }

    /**
     * @brief 判断当前数值是否等于number值
     *
     * @param $number String/BigNumber 参与判断的右值
     *
     * @return Bool true:相等; false:不相等
     */
    public function eq($number = '0')
    {
        $number = $this->numberToString($number);
        $comp = bccomp($this->numberValue, $number, $this->numberScale);

        if ($comp === 0) {
            return true;
        }

        return false;
    }

    /**
     * @brief 判断当前数值是否大于number值
     *
     * @param $number String/BigNumber 参与判断的右值
     *
     * @return Bool true:大于; false:不大于
     */
    public function gt($number = '0')
    {
        $number = $this->numberToString($number);
        $comp = bccomp($this->numberValue, $number, $this->numberScale);

        if ($comp === 1) {
            return true;
        }

        return false;
    }

    /**
     * @brief 判断当前数值是否大于或等于number值
     *
     * @param $number String/BigNumber 参与判断的右值
     *
     * @return Bool true:大于; false:不大于
     */
    public function egt($number = '0')
    {
//        $number = $this->numberToString($number);
//
//        if ($this->eq($number) || $this->gt($number)) {
//            return true;
//        }
//
//        return false;
    }

    /**
     * @brief 判断当前数值是否小于number值
     *
     * @param $number String/BigNumber 参与判断的右值
     *
     * @return Bool true:小于; false:不小于
     */
    public function lt($number = '0')
    {
//        $number = $this->numberToString($number);
//        $comp = bccomp($this->numberValue, $number, $this->numberScale);
//
//        if ($comp === -1) {
//            return true;
//        }
//
//        return false;
    }

    /**
     * @brief 判断当前数值是否小于或等于number值
     *
     * @param $number String/BigNumber 参与判断的右值
     *
     * @return Bool true:小于; false:不小于
     */
    public function elt($number = '0')
    {
//        $number = $this->numberToString($number);
//
//        if ($this->eq($number) || $this->lt($number)) {
//            return true;
//        }
//
//        return false;
    }
}

$result = array();
$limit = (int)rtrim(fgets(STDIN));
for ($index = 0; $index < $limit; $index ++) {
    $compute_str = rtrim(fgets(STDIN));
    array_push($result, calc($compute_str));
}
echo join("\n", $result) . "\n";
function calc($str) {
    $cache = "";
    $stack = array();
    $auth_calc = array("+", "-", "*", "/");
    foreach(str_split($str) as $item) {
        if (in_array($item, $auth_calc)) {
            array_push($stack, $cache);
            array_push($stack, $item);
            $cache = "";
        }else if (is_numeric($item) || $item == "."){
            $cache .= $item;
        }
    }
    if ($cache != "") {
        array_push($stack, $cache);
    }
    var_dump($stack);
    $number = new BigNumber($stack[0], 30);
    array_shift($stack);
    $func = "";
    foreach($stack as $item) {
        if (in_array($item, $auth_calc)) {
            $func = $item;
            continue;
        }else if($func != ""){
            switch ($func) {
                case "+":
                    $number->add($item);
                    break;
                case "-":
                    $number->sub($item);
                    break;
                case "*":
                    $number->mul($item);
                    break;
                case "/":
                    $number->div($item);
                    break;
            }
            $func = "";
        }
    }
    $return_data = explode(".", $number->toString());
    $cache = array();
    $valid_num_find = false;
    foreach (array_reverse(str_split(end($return_data))) as $item) {
        if ($item != "0" || $valid_num_find) {
            $valid_num_find = true;
            array_push($cache, $item);
        }
    }
    $return_data[count($return_data) - 1] = join("", array_reverse($cache));
    return join(".", array_filter($return_data, function($el) {
        return $el != "";
    }));
}
/*
5
12345678991019231124+1234567890000000
12345678991019231124-1234567890000000
1-123456789123456789
123465789.123456789+987654321.987654321
1000000000-0.1
*/